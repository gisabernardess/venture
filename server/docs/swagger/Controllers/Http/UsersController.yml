/users:
  post:
    tags:
      - user
    summary: creates a user
    requestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - email
              - password
              - password_confirmation
            properties:
              name:
                type: string
                example: Jane Doe
              email:
                type: string
                example: email@domain.com
              role:
                type: string
                enum:
                  - PLAYER
                  - MODERATOR
                  - ADMIN
              password:
                type: string
                format: password
              password_confirmation:
                type: string
                format: password
    responses:
      201:
        description: user created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      400:
        description: validation fails
      501:
        description: not implemented
  get:
    tags:
      - user
    summary: list all users
    responses:
      200:
        description: users listed
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: array
                  items:
                    $ref: "#/components/schemas/User"
/users/{id}:
  get:
    tags:
      - user
    summary: finds a user by id
    description: return a single user
    parameters:
      - name: id
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
    responses:
      200:
        description: user exists
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      404:
        description: user not found
  put:
    tags:
      - user
    summary: updates an existing user
    description: this can only be done by the logged user.
    parameters:
      - name: id
        in: path
        description: ID of user to return
        required: true
        schema:
          type: integer
          format: int64
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              avatarUrl:
                type: string
              name:
                type: string
                example: Jane Doe
              email:
                type: string
                example: email@domain.com
              password:
                type: string
                format: password
              role:
                type: string
                enum:
                  - PLAYER
                  - MODERATOR
                  - ADMIN
    responses:
      200:
        description: user updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      400:
        description: validation fails
      404:
        description: user not found
  delete:
    tags:
      - user
    summary: deletes an existing user
    description: this can only be done by the logged user.
    parameters:
      - name: id
        in: path
        description: the id that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
    responses:
      200:
        description: user deleted
      404:
        description: user not found
