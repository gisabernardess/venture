/posts:
  post:
    security:
      - authorization: []
    tags:
      - post
    summary: creates a post
    description: this can only be done by the logged user
    requestBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - userId
              - slug
              - title
              - content
            properties:
              userId:
                type: integer
                format: int64
              slug:
                type: string
              title:
                type: string
              excerpt:
                type: string
              content:
                type: string
    responses:
      201:
        description: post created
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      400:
        description: validation fails
      501:
        description: not implemented
  get:
    security:
      - authorization: []
    tags:
      - post
    summary: list all posts
    description: this can only be done by the logged user
    responses:
      200:
        description: posts listed
        content:
          application/json:
            schema:
              type: object
              properties:
                posts:
                  type: array
                  items:
                    $ref: "#/components/schemas/Post"
                meta:
                  type: object
                  properties:
                    total:
                      type: integer
                    per_page:
                      type: integer
                    current_page:
                      type: integer
                    last_page:
                      type: integer
                    first_page:
                      type: integer
                    first_page_url:
                      type: string
                    last_page_url:
                      type: string
                    next_page_url:
                      type: string
                    previous_page_url:
                      type: string
/posts/{slug}:
  get:
    security:
      - authorization: []
    tags:
      - post
    summary: finds a post by slug
    description: this can only be done by the logged user
    parameters:
      - name: slug
        in: path
        description: post's slug
        required: true
        schema:
          type: string
    responses:
      200:
        description: post exists
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      404:
        description: post not found
  put:
    security:
      - authorization: []
    tags:
      - post
    summary: updates an existing post
    description: this can only be done by the logged user
    parameters:
      - name: slug
        in: path
        description: post's slug
        required: true
        schema:
          type: string
    requestBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              slug:
                type: string
              title:
                type: string
              excerpt:
                type: string
              content:
                type: string
    responses:
      200:
        description: post updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
      400:
        description: validation fails
      404:
        description: post not found
  delete:
    security:
      - authorization: []
    tags:
      - post
    summary: deletes an existing post
    description: this can only be done by the logged user
    parameters:
      - name: slug
        in: path
        description: post's slug
        required: true
        schema:
          type: string
    responses:
      200:
        description: post deleted
      404:
        description: post not found
